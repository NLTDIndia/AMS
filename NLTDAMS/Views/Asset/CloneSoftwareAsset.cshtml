@model AMSUtilities.Models.SoftwareAssetModel
@using AMSUtilities.Enums
@using System.Globalization
@{
    ViewBag.Title = "CloneSoftwareAsset";
    Layout = "~/Views/Shared/_Layout.cshtml";
    string sysFormat = CultureInfo.CurrentCulture.DateTimeFormat.ShortDatePattern;
}
@using (Html.BeginForm("CreateSoftwareAsset", "Asset", FormMethod.Post, new { @enctype = "multipart/form-data", @id = "formCreateAsset", @class = "formAssetCreation" }))
{
    @Html.AntiForgeryToken()
    <div class="row">
        <div class="col-sm-12">
            <div class="box box-primary">
                <div class="box-header with-border">
                    <h3 class="box-title">Create Software Asset</h3>
                </div>
                <div class="box-body">
                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                    @Html.HiddenFor(model => model.AssetCategoryId, (int)AssetCategories.Software)
                    <div class="row">
                        @*<div class="col-sm-3">
                                <div class="form-group">
                                    <label for="InvoiceNumber">Invoice</label>
                                    <select id="invoiceId" name="InvoiceId" class="form-control">
                                        <option disabled selected value="">Please select value</option>
                                        <option value="1">00123</option>
                                        <option value="2">00124</option>
                                        <option value="3">00125</option>
                                    </select>
                                </div>
                            </div>*@
                        @*<div class="col-sm-3">
                                <label for="Asset_Category">Asset Category</label>
                                @Html.DropDownListFor(model => model.AssetCategoryId, Model.AssetCategories, new { @id = "assetCategory", @class = "form-control", @disabled = "true" })
                            </div>*@
                        <div class="col-sm-3">
                            <label for="Asset_Type">Asset Type</label>
                            @Html.DropDownListFor(model => model.AssetTypeID, Model.AssetTypes, new { @id = "assetType", @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.AssetTypeID, "", new { @class = "text-danger" })
                        </div>
                        <div class="col-sm-3">
                            <div class="form-group">
                                <label for="AssetName">Asset Name</label>
                                @Html.TextBoxFor(model => model.AssetName, "" as string, new { @id = "assetName", @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.AssetName, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="col-sm-3">
                            <div class="form-group">
                                <label for="From">Serial Number</label>
                                @Html.TextBoxFor(model => model.SerialNumber, "" as string, new { @id = "serialNumber", @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.SerialNumber, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="col-sm-3">
                            <div class="form-group">
                                <label for="From">Publisher</label>
                                @Html.TextBoxFor(model => model.ProductName, Model.ProductName as string, new { @id = "publisher", @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.ProductName, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-sm-3">
                            <div class="form-group">
                                <label for="From">License Number</label>
                                @Html.TextBoxFor(model => model.LicenceNumber, Model.LicenceNumber as string, new { @id = "licenceNumber", @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.LicenceNumber, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="col-sm-3">
                            <div class="form-group">
                                <label for="From">License Purchase Date</label>
                                <div class="input-group mb-3">
                                    @Html.TextBox("LicencePurchaseDate", DateTime.Now.ToString("MM/dd/yyyy"), new { @id = "licencePurchaseDate", @class = "startDate form-control", autocomplete = "off" })
                                    <div class="input-group-append">
                                        <span class="input-group-text"><i class="fa fa-calendar fa-fw"></i></span>
                                    </div>
                                </div>
                                @Html.ValidationMessageFor(model => model.LicencePurchaseDate, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="col-sm-3">
                            <div class="form-group">
                                <label for="To">License Expiry Date</label>
                                <div class="input-group mb-3">
                                    @Html.TextBox("LicenceExpiryDate", "", new { @id = "licenceExpiryDate", @class = "endDate form-control", autocomplete = "off" })
                                    <div class="input-group-append">
                                        <span class="input-group-text"><i class="fa fa-calendar fa-fw"></i></span>
                                    </div>
                                </div>
                                @Html.ValidationMessageFor(model => model.LicenceExpiryDate, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-sm-9">
                            <div class="form-group">
                                <label class="required" for="Reason">Software Description</label>
                                @Html.TextAreaFor(model => model.Comment, new { @cols = "20", @rows = "2", @id = "softWareDescription", @class = "form-control" })
                            </div>
                        </div>
                    </div>
                    <div id="partialPlaceHolder"></div>
                    <div class="row">
                        <div class="col-sm-12" style="float:right">
                            <button type="button" style="margin-left:10px" class="btn btn-primary pull-right" id="btnCancel">
                                Cancel
                            </button>
                            <button type="submit" style="margin-left:10px" class="btn btn-primary pull-right" id="btnCreateAndClone" onclick="$('#cloneId').val(true)">
                                Create & Clone
                            </button>
                            <button type="submit" class="btn btn-primary pull-right" id="btnCreate" onclick="$('#cloneId').val(false)">
                                Create
                            </button>
                        </div>
                    </div>
                </div>
                @Html.Hidden("isClone", false, new { @id = "cloneId" })
            </div>
        </div>
    </div>
}
@Scripts.Render("~/bundles/jqueryval")
<script>
    $(function () {
        $("#serialNumber").val("");
        $("#assetName").val("");
         if ('@TempData["Message"]'!= null &&'@TempData["Message"]'!= ""&&'@TempData["MessageType"]'!= null &&'@TempData["MessageType"]'!= "")
         {
             DisplayMessage('@TempData["MessageType"]', '@TempData["Message"]')
         }
                 var assetType = $("#assetType").children("option:selected").val();
             $("#componentsTab").css("display", "block");
             var url = '@Url.Action("ManageSoftwareComponents", "Asset")?assetType=' + assetType + '&assetId=' + '@Model.AssetID';
             if (url != "" && url != null) {
                 $("#partialPlaceHolder").load(url, function () {
              $('#partialPlaceHolder').fadeIn('fast');
              });
             }
    $("#btnCancel").on("click", function () {
        var url = '@Url.Action("ManageAssets", "Asset")';
        document.getElementById("formCreateAsset").action = url;
        document.getElementById("formCreateAsset").submit();
    });
             $("#assetType").on("change", function () {
         var assetType = $(this).children("option:selected").val();
             $("#componentsTab").css("display", "block");
              var url =  '@Url.Action("ManageSoftwareComponents", "Asset")?assetType='+assetType;
              if (url != "" && url != null) {
              $("#partialPlaceHolder").load(url, function () {
              $('#partialPlaceHolder').fadeIn('fast');
              });
             }
     });
       @*$("#btnCreateAndClone").on("click", function () {
       $("#cloneId").val(true);
       var url = '@Url.Action("CreateSoftwareAsset", "Asset")';
        document.getElementById("formCreateAsset").action = url;
        document.getElementById("formCreateAsset").submit();
       });
           $("#btnCreate").on("click", function () {
        $("#cloneId").val(false);
       var url = '@Url.Action("CreateSoftwareAsset", "Asset")';
        document.getElementById("formCreateAsset").action = url;
        document.getElementById("formCreateAsset").submit();
    });*@
    });
    function createComponent(componentTypeId, assetCategoryId, dropdownId, componentNameId, descriptionId, compValidationId, descValidationId, modalId) {
    var componentName = $("#" + componentNameId).val();
    var description = $("#" + descriptionId).val();
    var error=false;
    if(componentName==null || componentName=="")
    {
    error=true;
     $("#" + compValidationId).css("display","block");
    }
    else
    {
      $("#" + compValidationId).css("display","none");
    }
     if(description==null || description=="")
    {
    error=true;
     $("#" + descValidationId).css("display","block");
    }
    else
    {
      $("#" + descValidationId).css("display","none");
    }

    var Component={
    ComponentTypeID:componentTypeId,
    ComponentName:componentName,
    Description : description
    };

    if(error==false)
    {
    $.ajax({
        url: '@Url.Action("CreateComponent","Asset")',
             type: 'POST',
             data: { component: Component },
              success: function(result) {
                 if(result!="Error" && result!="0" && result!=""){
                  addOption(componentName,result,dropdownId);
                 $("#"+modalId).modal("hide");
                 SuccessAlert("Component added successfully");
                 $("html, body").animate({ scrollTop: 0 }, "slow");

                }
                },
                failure: function(response) {
                    alert(response.responseText);
                },
                error: function(response) {
                    alert(response.responseText);
                }

        });
    }
    else
    {
    return false;
    }
    }
    function addOption(optionText,optionValue,selectId)
    {
            $('#'+selectId).append('<option value="'+optionValue+'">'+optionText+'</option>');
    }
</script>
<script>
    //Date picker
    $(function () {
        var cultureInfo = '@sysFormat';
        cultureInfo = cultureInfo.toUpperCase();
    $('.startDate').datetimepicker({
        ignoreReadonly: true,
        format: cultureInfo,
        allowInputToggle: true,
        useCurrent: false,
        icons: {
            time: "fa fa-clock-o",
            date: "fa fa-calendar",
            up: "fa fa-arrow-up",
            down: "fa fa-arrow-down",
            previous: "fa fa-chevron-left",
            next: "fa fa-chevron-right",
            today: "fa fa-clock-o",
            clear: "fa fa-trash-o"
        }
    });
    var dateToday = new Date();
    $('.endDate').datetimepicker({
        ignoreReadonly: true,
        format: cultureInfo,
        allowInputToggle: true,
        useCurrent: false,
        icons: {
            time: "fa fa-clock-o",
            date: "fa fa-calendar",
            up: "fa fa-arrow-up",
            down: "fa fa-arrow-down",
            previous: "fa fa-chevron-left",
            next: "fa fa-chevron-right",
            today: "fa fa-clock-o",
            clear: "fa fa-trash-o"
        }
    });
    $(".startDate").on("dp.change", function (e) {
        $('.endDate').data("DateTimePicker").minDate(e.date);
    });
    $(".endDate").on("dp.change", function (e) {
        $('.startDate').data("DateTimePicker").maxDate(e.date);
    });
});
</script>